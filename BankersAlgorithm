#include <stdio.h>
#include <pthread.h>

int n, m;
int alloc[10][10];
int max[10][10];
int avail[10];
int finish[10];
pthread_mutex_t mutex;

void* request_resources(void* arg)
{
int *process_num = (int*) arg;
int i, j;

pthread_mutex_lock(&mutex);

for (j = 0; j < m; j++)
{
if (alloc[*process_num][j] > avail[j])
{
printf("Unsafe state: Process %d requesting more resources than available\n", *process_num);
pthread_mutex_unlock(&mutex);
pthread_exit(NULL);
}
}

for (j = 0; j < m; j++)
{
avail[j] -= alloc[*process_num][j];
}

int safe = 1;
for (i = 0; i < n; i++)
{
if (!finish[i])
{
safe = 0;
for (j = 0; j < m; j++)
{
if (max[i][j] - alloc[i][j] > avail[j])
{
safe = 1;
break;
}
}

if (safe)
{
for (j = 0; j < m; j++)
{
avail[j] += alloc[i][j];
alloc[i][j] = 0;
finish[i] = 1;
}
}
}
}

printf("Allocated resources for Process %d: ", *process_num);
for (j = 0; j < m; j++)
{
printf("%d ", alloc[*process_num][j]);
}
printf("\nAvailable resources after allocation: ");
for (j = 0; j < m; j++)
{
printf("%d ", avail[j]);
}
printf("\nSystem state after allocation: ");
for (i = 0; i < n; i++)
{
printf("%d ", finish[i]);
}
printf("\n");

pthread_mutex_unlock(&mutex);
pthread_exit(NULL);
}

int main()
{
pthread_t threads[10];
int i, j;

printf("Enter number of processes: ");
scanf("%d", &n);
printf("Enter number of resources: ");
scanf("%d", &m);

printf("Enter allocation matrix:\n");
for (i = 0; i < n; i++)
{
for (j = 0; j < m; j++)
{
scanf("%d", &alloc[i][j]);
}
}

printf("Enter maximum resources matrix:\n");
for (i = 0; i < n; i++)
{
for (j = 0; j < m; j++)
{
scanf("%d", &max[i][j]);
}
}

printf("Enter available resources: ");
for (j = 0; j < m; j++)
{
scanf("%d", &avail[j]);
}

for (i = 0; i < n; i++)
{
finish[i] = 0;
}

pthread_mutex_init(&mutex, NULL);

for (i = 0; i < n; i++) 
{
pthread_create(&threads[i], NULL, request_resources, (void*) &i);
}
for (i = 0; i < n; i++)
{
pthread_join(threads[i], NULL);
}

pthread_mutex_destroy(&mutex);

return 0;
}




